function e(e=""){return JSON.parse(JSON.stringify(e))}function n(e=""){return e.replace(/[\-\[\]{}()*+?.,\\\^\$|#]/g,"\\$&")}function t(e="",n="",t=[],r=0){let i=0,s=r;const c=t.filter((n=>n.includes(e))).map((t=>{const r=n.indexOf(t,i)+t.indexOf(e);return r>i&&(i=r),r}));if(c.includes(s))for(;c.includes(s);)s=n.indexOf(e,s+1);return s}function r(r="",i="extension",s=((e="")=>e),c={},l={}){const o=r.includes("\r")?"\r\n":"\n",p=r.match(/(?<!\\|\>\s*)```[^```]+\\?```(\r?\n)?/g)||[],a=Array.from(new Set(r.match(/\&#\w+;/g)||[])),f=a.map((e=>escape(e))),d=p.reduce(((e,n)=>e.replace(n,"")),e(r)),u=a.reduce(((e,t)=>e.replace(new RegExp(n(t),"g"),escape(t))),d).match(/(?!\r?\n)(\s+|\t+)?\>\[\!.*\r?\n((\s+|\t+)?\>(?!\[\!).*\r?\n?){1,}/g)||[],$=Object.keys(c).filter((e=>"VIDEO"===c[e]))[0]||"VIDEO",g=r.match(new RegExp(`(?<!\`\`\`\\r?\\n(\\s+|\\t+)?)\\>\\[\\!${$}\\]\\((.*)\\)`,"g"))||[];let m=e(r);for(const e of u){const r=e.split(/\r?\n/).filter((e=>e.length>0&&/[^\s]+/.test(e))),d=(r[0].match(/\>\[\!(.*)\]/)||[])[1]||"",u=r[0].replace(/\>\[.*/,""),$=`${o}${u}`,g=`${u}${s(r.slice(1,r.length).map((e=>{let t=e.replace(/^(\s+|\t+)?\>/,"").trim();for(const e of a)t.includes(e)&&(t=t.replace(new RegExp(n(e),"g"),escape(e)));return t})).filter(((e,n)=>0!==n||e.length>0)).join(o).trim()).split(/\r?\n/).join($)}`,h=(d in c?c[d]:d).toLowerCase().replace(/\s/g,""),x=r.map((e=>{let t=e;for(const e of f)t.includes(e)&&(t=t.replace(new RegExp(n(e),"g"),unescape(e)));return t})).join(o);let w=m.indexOf(x);p.length>0&&(w=t(x,m,p,w)),m=`${m.slice(0,w)}${u}<div class="${i} ${h}">${$}<div>${d in l?l[d]:d}</div>${$}<div>${o}${g.replace(/\r?\n$/,"")}${$}</div>${$}</div>${$}${m.slice(w+x.length)}`}for(const e of g){let n=m.indexOf(e);p.length>0&&(n=t(e,m,p,n)),m=`${m.slice(0,n)}<div class="${i} video"><iframe allowfullscreen embedded-video src="$2" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;"><source src="$2" type="" /><p>Your browser does not support the iframe element.</p></iframe></div>${m.slice(n+e.length)}`}for(const e of f)m=m.replace(new RegExp(n(e),"g"),unescape(e));return m.trim()}export{r as afm};